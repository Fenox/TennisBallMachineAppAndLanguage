package bmsp.writer;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import java.util.ArrayList;

import javax.xml.parsers.DocumentBuilder;

import bmsp.BMSPGenerator;
import bmsp.commands.Command;
import bmsp.commands.JumpBack;

public class BMSPXMLFileWriter implements BMSPWriter {

	private String filePath; 
	
	public BMSPXMLFileWriter(String filePath) {
		this.setFilePath(filePath);
	}
	
	public String getFilePath() {
		return filePath;
	}

	public void setFilePath(String filePath) {
		this.filePath = filePath;
	}
	
	@Override
	public void write(BMSPGenerator generator) {
		
		DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
		
		try {
			DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
			Document doc = docBuilder.newDocument();
			Element rootElement = doc.createElement("bmsp");
			doc.appendChild(rootElement);
			
			ArrayList<Command> bmss = generator.getBMSS();
			
			for(int i = 0; i < bmss.size(); i++) { 
				
				if(bmss.get(i) instanceof JumpBack) {
					addJumpback(doc, rootElement, (JumpBack)bmss.get(i));
				}
			}
			
		} catch (ParserConfigurationException e) {
			e.printStackTrace();
		}
	}

	private void addJumpback(Document doc, Element rootElement, JumpBack jumpBack) {
		Element jumpBackElement = doc.createElement("JumpBack");
		rootElement.appendChild(jumpBackElement);
		
		Element jumpIndex = doc.createElement("jumpIndex");
		jumpIndex.appendChild(doc.createTextNode(Integer.toString(jumpBack.getJumpIndex())));
		jumpBackElement.appendChild(jumpIndex);
		
		Element repetitions = doc.createElement("repetitions");
		repetitions.appendChild(doc.createTextNode(Integer.toString(jumpBack.getRepetitions())));
		jumpBackElement.appendChild(repetitions);
	}
}
